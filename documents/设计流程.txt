1站在用户的角度上，不考虑怎么实现，只考虑要做什么功能
2站在程序员的角度，开始考虑怎么实现。好的程序结构应该是分层分模块的，每一个部分负责一个单一的功能。从分层的角度来说，每一层的模块依赖下层提供的接口，给上层模块提供一定的支持，底层对上层是完全没有依赖的，例如说你删掉上层的代码，底层代码是完全不会报错的。从分模块的角度来说，一个模块应该负责一个功能，两个模块直接依赖尽可能少（有的是要求不许有直接依赖），要用间接依赖，这样删掉一个模块，另一个模块的代码完全不会报错。
我看了一下聊天记录里说的你要做的东西，我简单的列一下我想到的类，
第一层，modle类，就是数据结构，你要把xml文件读取转成这个类，然后再进行操作
DataInput接口，只有一个方法，就是public modle input（path）, 这个类的作用是传进来一个路径，然后他负责把该路径的东西转成modle类返回，
XmlDataInputImpl继承自DataInput接口，实现input方法，具体实现如下，python中解析xml主要有3种方法
http://www.open-open.com/lib/view/open1329403902937.html，参考这里，可以考虑用第三种方式解析，
之所以定义接口（DataInput）和具体的实现（XmlDataInputImpl）是为了上层使用的都是DataInput的，当你如果有一天数据来源不是Xml了，而是json，你只要新实现一个例如JsonDataInputImpl来解析json就行，上层都不需要知道底层的这些变动，改动会很小，
或者可以改成DataPersistence接口，在datainput的接口基础上再加一个public output（modle）方法，这样输入输出都有了，
到第二层了，可以定义一个controller类，这是具体的业务逻辑层，负责把输入的数据处理过后再输出，
会有一个DataInput对象的实例，但是具体是什么哪个实现就无所谓了，然后提供给上层3个方法
load（path），里面的具体实现就是钓用datainput对象加载数据进来，得到modle对象
operation（）方法，具体的实现就是把load方法得到的modle对象进行处理成最终结果
output（path）方法，把modle对象再写回文件
第三层，就是界面了，这是真正的业务流程都有了，无论你是使用wxpython还是qt什么的图形库，下层都是不知道的，这层只是负责界面展示而已

小胖新指示：
1根据template.xml来设计数据结构，不需要一步到位，其实就是把这个xml中的各个字段解析出来变成model类。
你现在model这个类在解析template后会读到一些值 然后用户输入了之后就会被用户输入的值覆盖了是不。
解析这个xml变成model类，可以根据情况再修改你的model类
你有一个界面类GUI 提供一个方法 getUserInput()
你还有个DataInput类 提供一个方法input(path)
你假设你有一个类DataInput，他会给你读取template.xml
GUI ： public UserInput getUserInput()
DataInput ： public Template input(path)
UserInput+Template = Model
再来个DataOuput : public output(path , Model)生成model.xml

2下一步设计流程
每个流程由什么类负责
这个类提供什么方法来做什么事情
具体怎么实现你无所谓

定好类，每个类就是分成模块实现

按照流程定义好类，想好类中的方法是做什么的，给出类名，方法名

假如说你有一个类叫File，这个类负责和文件打交道，那这个类要提供什么功能呢，读取 写，这些就是方法
